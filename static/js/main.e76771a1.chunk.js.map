{"version":3,"sources":["components/Sidebar.js","components/Body.js","components/Header.js","components/Home.js","serviceWorker.js","index.js"],"names":["Sidebar","react_default","a","createElement","className","Component","Body","this","props","radius","String","getRadius","Header","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","goToMainPage","showBody","bind","assertThisInitialized","setLbText","setKgText","state","lb","kg","lbs","kgs","MassInKg","Math","pow","e","preventDefault","setState","onCalc","calculateRadius","target","value","lbstokg","kgstolbs","Fragment","autoComplete","onSubmit","type","onChange","name","id","htmlFor","Home","landingState","components_Body","components_Header","components_Sidebar","Boolean","window","location","hostname","match","ReactDOM","render","components_Home","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e76771a1.chunk.js","sourcesContent":["import React,\r\n{\r\n  Component\r\n} from 'react';\r\n\r\nimport '../styles/global.css'\r\n\r\nclass Sidebar extends Component {\r\n\r\nrender() {\r\n  return (\r\n    <div className='sidebar'>\r\n      <p>\r\n      A black hole is a celestial object with a gravitational field strong enough to prevent light from escaping. They are formed from dead stars about twice the mass of the sun. When a star runs out of hydrogen and helium used in stellar nucleosynthesis, there is not enough thermal pressure to balance the gravitational force inward. When the gravitational force overcomes thermal pressure, the star is then held up by electron degeneracy pressure (this is what holds white dwarf stars in hydrostatic equilibrium). Electron degeneracy pressure is an outward force that arises from the Pauli Exclusion Principle. The Pauli Exclusion Principle states that no two identical half-integer spin particles (fermions) can occupy the same quantum state. In other words, identical fermions can't occupy the same location. Electrons, which are fermions, are being pushed into the same space by gravity. The degenerate electrons must combine with protons, forming neutrons. Once this fermionic transition takes place, the star is now held up by neutron degeneracy pressure. If the gravity is strong enough, as for a >2.17 solar mass star (the Tolman–Oppenheimer–Volkoff limit), the neutron degeneracy pressure can be overcome by gravity. When this takes place, the neutron star forms a black hole. The black hole's mass is forced into an infinitesimal volume, creating a region of spacetime with infinite density. This region of spacetime is stretched by the black hole to the point that light cannot escape. This is known as the Schwarzschild radius. The easiest way, though theoretically unsound, to derive the Schwarzschild radius is to integrate the gravitational force from some theoretical radius, r, to infinity and setting this equal to the kinetic energy of a mass, m, traveling at the speed of light. This yields the result rs = 2gm/c^2. <br/>\r\n      References: your friendly local genius, Adam\r\n      </p>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","import React,\r\n{\r\n  Component\r\n} from 'react';\r\n\r\nimport '../styles/global.css'\r\n\r\nclass Body extends Component {\r\n\r\ngetRadius() {\r\n  if (this.props.radius === null) {\r\n    return null\r\n  } else {\r\n    return String(this.props.radius * 100) + ' cm'\r\n  }\r\n}\r\n\r\nrender() {\r\n  return (\r\n    <div>\r\n      <h1>{this.getRadius()}</h1>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Body;\r\n","import React,\r\n{\r\n  Component\r\n} from 'react';\r\nimport '../styles/global.css';\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.goToMainPage = this.showBody.bind(this)\r\n    this.setLbText = this.setLbText.bind(this)\r\n    this.setKgText = this.setKgText.bind(this)\r\n    this.showBody = this.showBody.bind(this)\r\n\r\n    this.state = {\r\n      lb: \"\",\r\n      kg: \"\",\r\n      showBody: false\r\n    }\r\n  }\r\n\r\n  lbstokg(lbs) {\r\n    return lbs * 0.453592\r\n  }\r\n\r\n  kgstolbs(kgs) {\r\n    return kgs / 0.453592\r\n  }\r\n\r\n  calculateRadius(MassInKg) {\r\n    return (2 * 6.67408*Math.pow(10,-11) * MassInKg )/ Math.pow(299792458,2)\r\n  }\r\n  showBody(e) {\r\n    e.preventDefault()\r\n    this.setState({ showBody: true })\r\n    this.props.onCalc(this.calculateRadius(this.state.kg))\r\n  }\r\n\r\n  setLbText(e) {\r\n    let lbs = e.target.value\r\n    this.setState({ lb: lbs, kg: this.lbstokg(lbs) })\r\n  }\r\n\r\n  setKgText(e) {\r\n    let kgs = e.target.value\r\n    this.setState({ kg: kgs, lb: this.kgstolbs(kgs) })\r\n  }\r\n\r\n  //END OF JAVASCRIPT\r\n\r\n  //HTML RENDER\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <form className=\"landing-form\" autoComplete=\"off\" onSubmit={this.showBody}>\r\n          <h3>Weight:</h3>\r\n          {/* lbs weight */}\r\n          <div>\r\n            <input type=\"number\"\r\n              value={this.state.lb}\r\n              onChange={this.setLbText}\r\n              name=\"lb-weight\" id='lb-weight' />\r\n            <label htmlFor='lb-weight'>lbs</label>\r\n          </div>\r\n          <div>\r\n            {/* kg weight */}\r\n            <input type=\"number\"\r\n              value={this.state.kg}\r\n              onChange={this.setKgText}\r\n              name=\"kg-weight\" id='kg-weight' />\r\n            <label htmlFor='kg-weight'>kgs</label>\r\n          </div>\r\n          <input type=\"submit\" value=\"Calculate\" />\r\n        </form>\r\n\r\n\r\n\r\n      </>\r\n\r\n\r\n\r\n\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\n//END OF HTML RENDER\r\n\r\nexport default Header;\r\n","import React,\r\n{\r\n  Component\r\n} from 'react';\r\n\r\nimport Sidebar from './Sidebar'\r\nimport Body from './Body'\r\nimport Header from './Header'\r\nimport '../styles/global.css'\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.onCalc = this.onCalc.bind(this)\r\n\r\n    this.state = {\r\n      landingState: true,\r\n      radius: null\r\n    }\r\n  }\r\n\r\n  onCalc(radius) {\r\n    this.setState({radius: radius, landingState: false})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <>\r\n        <Body radius={this.state.radius}/>\r\n        {this.state.landingState && <Header onCalc={this.onCalc} />}\r\n        <Sidebar />\r\n      </>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Home from './components/Home';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Home />, document.getElementById('home'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}